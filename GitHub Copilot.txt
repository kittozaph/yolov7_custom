Synthesizing 8/10 solutions (Duplicates hidden)

=======
Suggestion 1

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')


    cv2.destroyAllWindows()

=======
Suggestion 2

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')

    return numcrab

=======
Suggestion 3

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')

    #if not webcam:
    #    save_dir = Path(increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok))  # increment run
    #    save_dir.mkdir(parents=True, exist_ok=True)  # make dir

    #    # Save results (image with detections)
    #    if save_img or view_img:  # Save image with detections
    #        cv2.imwrite(save_dir / Path(p).name, im0)

    #    # Save results (image with detections)
    #    if save_txt or save_img or view_img:
    #        txt_path = save_dir / 'labels' / Path(p).stem + ('' if dataset.mode == 'image' else f'_{frame:06d}')
    #        txt_path = str(txt_path).replace('%', '%%')
    #        gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
    #        with open(txt_path + '.txt', 'a') as f:
    #            for *xyxy, conf, cls in reversed(det):
    #                if save_txt:  # Write to file
    #                    xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
    #                    line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format
    #                    f.write(('%g ' * len(line)).rstrip() % line + '\n')

    #        if save_img or view_img:  # Add bbox to image
    #            label = f'{names[int(cls)]} {conf:.2f}'
    #            plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

    #if save_txt or save_img or view_img:
    #    print(f'Saving results {save_dir / "labels"}...')
    #    if platform == 'darwin' and not opt.update:  # MacOS
    #        os.system('open ' + save_dir / 'labels')
    #    else:
    #        os.startfile(save_dir / 'labels')

    #if save_txt or save_img or view_img:
    #    print(f'S

=======
Suggestion 4

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')

    if save_txt or save_img:
        print('Results saved to %s' % Path(out))

    print('Done. (%.3fs)' % (time.time() - t0))

=======
Suggestion 5

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')

    #if not webcam:
    #    save_dir = str(Path(out) / Path(source).stem)
    #    (save_dir + '/results.txt').write(results)  # save results
    #    print(f'Results saved to {colorstr("bold", save_dir)}')
    #    if platform.system() == 'Darwin' and not opt.update:  # MacOS
    #        os.system('open ' + save_dir + '/results.txt')

    #if save_txt or save_img:
    #    print('Results saved to %s' % os.getcwd() + os.sep + out)
    #    if platform.system() == 'Darwin' and not opt.update:  # MacOS
    #        os.system('open ' + save_dir + '/results.txt')

    # Print results
    print('Done. (%.3fs)' % (time.time() - t0))

=======
Suggestion 6

def detect(source, weights, device, img_size, iou_thres, conf_thres):
    
    webcam = source.isnumeric() 
    #webcam = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))


    # Initialize
    set_logging()
    device = select_device(device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(img_size, s=stride)  # check img_size

    if half:
        model.half()  # to FP16


    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    t0 = time.perf_counter()

    for path, img, im0s, vid_cap in dataset:
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres)
        t3 = time_synchronized()


        # Process detections
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count

            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                founded_classes={} # Creating a dict to storage our detected items
                
                # Print results
                for c in det[:, -1].unique():                 
                    n = (det[:, -1] == c).sum()  # detections per class                
                    class_index=int(c)
                    count_of_object=int(n)
                    

                    founded_classes[names[class_index]]=int(n)
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                    count(founded_classes=founded_classes,im0=im0)  # Applying counter function
                    
                # Write results
                for *xyxy, conf, cls in reversed(det):
                    
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')
            numcrab=count_of_object
            if numcrab == 2:
                print('moulted')

        cv2.imshow(str(p), im0)
        #cv2.waitKey(1)   

    print(f'Done. ({time.perf_counter() - t0:.3f}s)')

    if not webcam:
        print('Results saved to %s' % Path(out))

    cv2.destroyAllWindows()
